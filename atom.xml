<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Road to PI/2</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="tangenta.github.io/"/>
  <updated>2017-10-26T14:07:09.717Z</updated>
  <id>tangenta.github.io/</id>
  
  <author>
    <name>tangenta</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>C++读文件操作暗礁</title>
    <link href="tangenta.github.io/2017/10/26/fstream-trap/"/>
    <id>tangenta.github.io/2017/10/26/fstream-trap/</id>
    <published>2017-10-26T13:16:01.000Z</published>
    <updated>2017-10-26T14:07:09.717Z</updated>
    
    <content type="html"><![CDATA[<p>废话不多说，先出一道题：<br>给定一个<strong>行数=3</strong>的文本文件，如何把每行的内容读出来存到std::vector<string>里面？<br><a id="more"></a></string></p><p>如果你的答案是：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function">fstream <span class="title">in</span><span class="params">(<span class="string">"text"</span>)</span></span>;</div><div class="line"><span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt; v;</div><div class="line"><span class="built_in">string</span> buf;</div><div class="line"><span class="keyword">while</span>(in) &#123;</div><div class="line">  in&gt;&gt;buf;</div><div class="line">  v.push_back(buf);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>那么我掐指一算：<br>你最近是不是感觉到你写的文件读写程序，行为有点怪异？<br>是不是忍不住发出惊叹“明明读完了啊，怎么多一行“？<br>是不是把fstream里面有关good/eof/fail/bad的文档全看了一遍，还是找不到问题在哪？<br>是不是才爬个5楼，就觉得胸闷气短…<br>咳，回到正题：如果在最后加一句</p><pre><code>cout&lt;&lt;v.size()&lt;&lt;&quot;\n&quot;;</code></pre><p>发现结果是4。分析一下原因：在in&gt;&gt;buf读取文件最后一行的时候，状态为goodbit，v.push_back正常读入最后一行;再次判断循环条件，由于goodbit，进入循环;这时in&gt;&gt;tmp就开始出问题了，它读到了文件结束符eof。然而我们的buf可不管，读不到东西也push_back，这就造成size比行数大1的结果。<br>总结起来一句话就是：<strong>“从文件读取到缓冲”和”从缓冲输入到容器”之间没有空隙，即无条件连接。</strong><br>显然，while的条件判断起作用的时机晚了。一个解决方案是：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">while</span>(<span class="number">1</span>) &#123;<span class="comment">//solution1</span></div><div class="line">  in&gt;&gt;buf;</div><div class="line">  <span class="keyword">if</span> (!in) <span class="keyword">break</span>;</div><div class="line">  v.push_back(buf);</div><div class="line">&#125;</div></pre></td></tr></table></figure><br>其等价于<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">while</span>(in&gt;&gt;buf) &#123;<span class="comment">//solution2</span></div><div class="line">  v.push_back(buf);</div><div class="line">&#125;</div></pre></td></tr></table></figure><br>第二个解决方案也是C++中的惯用法(idiom)，更为简洁、美观。</p><pre><code>return;}</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;废话不多说，先出一道题：&lt;br&gt;给定一个&lt;strong&gt;行数=3&lt;/strong&gt;的文本文件，如何把每行的内容读出来存到std::vector&lt;string&gt;里面？&lt;br&gt;
    
    </summary>
    
    
      <category term="c++" scheme="tangenta.github.io/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>邂逅异或链表</title>
    <link href="tangenta.github.io/2017/10/22/xorLinkedList/"/>
    <id>tangenta.github.io/2017/10/22/xorLinkedList/</id>
    <published>2017-10-22T13:39:40.000Z</published>
    <updated>2017-10-26T11:12:46.889Z</updated>
    
    <content type="html"><![CDATA[<p>数据结构课上刷轮子哥，看到一条关于链表的回答，意思大概是 “可以用猥琐的方法把节点的前驱后继地址压缩为一个值，实现双向遍历”。必应搜索一波，于是课还没上完，满脑子都是”异或链表”的骚操作。想也正好，刚刚布置的链表作业又没写着”不能用异或链表”这几个字，咱说干就干。</p><a id="more"></a><h2 id="一、"><a href="#一、" class="headerlink" title="一、"></a>一、</h2><p>异或链表的原理是，表中的每个节点跟单链表一样，都有俩区域: 数据域和指针域。这个指针域就厉害了，存的不是别人，而是它前后节点地址的异或。得益于异或运算的性质，任何时候只需要知道链表中相邻的两个节点地址，就可以访问其中的每一个节点。以前只听过异或运算能用来实现inplace swap(不需要额外的空间就可以交换两个变量)，没想到还能应用到链表中。</p><h2 id="二、"><a href="#二、" class="headerlink" title="二、"></a>二、</h2><p>看起来很简单嘛，内嵌一个节点类，复制控制函数压死，再上容器四大护法增删改查，一切都很顺利……嗯？这段怎么这么deja vu？定睛一看，这几段都有遍历操作，而每次遍历都用到两个节点指针，一前一后一个while，内部再一个判断一个break。想起scott mayers教导我们，代码复制不可取。今天复制一段代码，明天就会复制一个文件，后天……跑题了，总之作为一个有理想的青年，代码复制要不得。想到这里，我这暴脾气就上来了，一顿操作从删掉重写到发朋友圈，丝毫不拖泥带水，思考时被我拔掉的头发也不算特别多。这个是效果：</p><p>修改前:<br><img src="/2017/10/22/xorLinkedList/2017-10-22-1.png" width="50%" height="50%"></p><p>修改后：<br><img src="/2017/10/22/xorLinkedList/2017-10-22-2.png" width="50%" height="50%"></p><p><img src="/2017/10/22/xorLinkedList/2017-10-22-3.png" width="100%" height="100%"></p><p>将判断条件、迭代调整、返回值做成函数调用形式，达到用模板参数传递”功能“(函数指针、函数对象或lambda表达式)的目的。简单说就是从外部把功能嵌入函数体中。</p><p>一个traverse函数打天下 =_=</p><h2 id="三、"><a href="#三、" class="headerlink" title="三、"></a>三、</h2><p>敲定最后一个lambda表达式，好不容易松了口气，正欣赏着”成果”，不知道《C++ template》的哪一个混蛋作者在我脑子里喊了句”code bloat”。</p><p>。。。</p><p>。。。</p><p>我、lambda表达式们大眼瞪小眼，这时我才发现一个个的lambda(s?)，每个类型都不相同，这意味着几乎每次使用到traverse()都要实例化，我仿佛已经看到了目标文件的臃肿。再一细看，还把traverse写成了public。典型滥用模板的例子，哎。</p><h2 id="四、"><a href="#四、" class="headerlink" title="四、"></a>四、</h2><p>我不甘心啊！伴随着更多头发的飘落，”遍历“这个词终于让我联想到了”迭代器“。是啊，为什么不搞一个迭代器呢？<br>for(List<t>::iterator i = v.begin(); i != v.end(); ++i) {…}，<br>多么优雅。但是迭代器内部的数据一般只有一个指针，而异或链表的遍历必须由两个指针贴着走。那一个迭代器包含两个指针行不行呢？开始尝试：</t></p><p><img src="/2017/10/22/xorLinkedList/2017-10-22-4.png" width="100%" height="100%"><br>解引用操作和指针操作都取ptr2，{ptr1 = 0; ptr2 = head}对应begin，{ptr1 = tail, ptr2 = 0}对应end，没毛病。</p><p>(中间踩了点小坑，这里省略一万字，”explicit你都干了些什么”、”包含编译模型之凝视”、”const成员函数之谜”、”多余&amp;引发的运行时血案”之类的不再细叙)</p><p>最终效果如下：<br>(这是获得第pos-1个节点和第pos个节点指针的具体实现)<br><img src="/2017/10/22/xorLinkedList/2017-10-22-5.png" width="100%" height="100%"><br>很明显，无论是易读性、可维护性都提高了不少。</p><p><a href="https://gitee.com/tangenta/XorList.git" target="_blank" rel="external">XorList源码</a></p><p>虽然简陋版迭代器是写出来了，但不知道它和stl算法的结合情况如何。哪天出乱子了我再收拾它去。</p><pre><code>return (待续||不续);}</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;数据结构课上刷轮子哥，看到一条关于链表的回答，意思大概是 “可以用猥琐的方法把节点的前驱后继地址压缩为一个值，实现双向遍历”。必应搜索一波，于是课还没上完，满脑子都是”异或链表”的骚操作。想也正好，刚刚布置的链表作业又没写着”不能用异或链表”这几个字，咱说干就干。&lt;/p&gt;
    
    </summary>
    
    
      <category term="杂谈" scheme="tangenta.github.io/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>git学习笔记</title>
    <link href="tangenta.github.io/2017/09/28/git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>tangenta.github.io/2017/09/28/git学习笔记/</id>
    <published>2017-09-28T07:58:52.000Z</published>
    <updated>2017-10-26T10:44:37.989Z</updated>
    
    <content type="html"><![CDATA[<p>用作记录，方便查阅<br><a id="more"></a></p><h2 id="创建git仓库"><a href="#创建git仓库" class="headerlink" title="创建git仓库"></a>创建git仓库</h2><table><thead><tr><th>command</th><th>description</th></tr></thead><tbody><tr><td> $ git init</td><td>在当前目录初始化仓库</td></tr></tbody></table><h2 id="提交-上传文件"><a href="#提交-上传文件" class="headerlink" title="提交/上传文件"></a>提交/上传文件</h2><table><thead><tr><th>command</th><th>description</th></tr></thead><tbody><tr><td> $ git add fileName</td><td>将工作区文件添加到暂存区</td></tr><tr><td> $ git commit -m “some comment”</td><td>将暂存区文件添加到版本库</td></tr></tbody></table><h2 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h2><table><thead><tr><th>command</th><th>description</th></tr></thead><tbody><tr><td> $ git rm fileName</td><td>删掉暂存区的文件</td></tr></tbody></table><h2 id="查看信息"><a href="#查看信息" class="headerlink" title="查看信息"></a>查看信息</h2><table><thead><tr><th>command</th><th>description</th></tr></thead><tbody><tr><td> $ git status</td><td>显示仓库当前状态</td></tr><tr><td> $ git diff fileName</td><td>显示工作区和版本库的差异</td></tr><tr><td> $ git log [–pretty=oneline] [–graph] [–abbrev-commit]</td><td>显示版本库内的commit历史记录 [以单行的形式显示][显示分支图]</td></tr><tr><td> $ git reflog</td><td>显示版本变更的历史命令</td></tr><tr><td> $ git branch</td><td>查看当前所在的分支</td></tr><tr><td> $ git stash list</td><td>查看被储存的工作区列表</td></tr><tr><td> $ git remote -v</td><td>查看远程库的[详细]信息</td></tr><tr><td> $ git tag</td><td>查看所有标签</td></tr><tr><td> $ git show <tagname></tagname></td><td>查看某一个标签的信息</td></tr></tbody></table><h2 id="版本设置"><a href="#版本设置" class="headerlink" title="版本设置"></a>版本设置</h2><table><thead><tr><th>command</th><th>description</th></tr></thead><tbody><tr><td> $ git reset –hard HEAD^</td><td>HEAD为当前版本，每一个”^”代表上一个版本。HEAD~n代表上n个版本</td></tr><tr><td> $ git reset –hard commitId</td><td>将当前版本设置到版本号为“commitId”的版本</td></tr></tbody></table><h2 id="撤销修改"><a href="#撤销修改" class="headerlink" title="撤销修改"></a>撤销修改</h2><table><thead><tr><th>command</th><th>description</th></tr></thead><tbody><tr><td> $ git checkout – fileName</td><td>使工作区文件撤销到(暂存区或版本库)的状态</td></tr><tr><td> $ git reset HEAD fileName</td><td>使暂存区的文件撤销到版本库的状态</td></tr></tbody></table><h2 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h2><table><thead><tr><th>command</th><th>description</th></tr></thead><tbody><tr><td> $ ssh-keygen -t rsa -C “email@example.com”</td><td>获取ssh key</td></tr><tr><td> $ git remote add origin git@serverName:path/repoName.git</td><td>关联远程库</td></tr><tr><td> $ git remote rm origin</td><td>删除origin远程库</td></tr><tr><td> $ git push -u origin master</td><td>第一次推送master分支的所有内容</td></tr><tr><td> $ git push origin master</td><td>推送最新修改</td></tr><tr><td> $ git clone git@serverName:path/repoName.git</td><td>克隆远程仓库到本地</td></tr><tr><td> $ git push origin master</td><td>把本地的master分支推送到远程origin分支上</td></tr></tbody></table><h2 id="创建-合并-删除分支"><a href="#创建-合并-删除分支" class="headerlink" title="创建/合并/删除分支"></a>创建/合并/删除分支</h2><table><thead><tr><th>command</th><th>description</th></tr></thead><tbody><tr><td> $ git checkout -b dev origin/dev</td><td>创建一个dev分支，并关联远程的orgin/dev分支</td></tr><tr><td> $ git branch –set-upstream dev origin/dev</td><td>设置本地dev于远程仓库origin/dev关联</td></tr><tr><td> $ git pull</td><td>将本地文件与远程仓库同步</td></tr><tr><td> $ git checkout -b dev</td><td>创建并切换到分支dev</td></tr><tr><td> $ git branch dev</td><td>创建分支dev</td></tr><tr><td> $ git checkout dev</td><td>切换到分支dev</td></tr><tr><td> $ git merge dev</td><td>把分支dev合并到当前分支</td></tr><tr><td> $ git branch -d dev</td><td>删除已被合并的分支dev</td></tr><tr><td> $ git branch -D dev</td><td>强制删除未合并的分支dev</td></tr><tr><td> $ git merge –no-ff -m “some comments” dev</td><td>以创建一个commit的方式合并dev分支</td></tr></tbody></table><h2 id="工作区临时储存-恢复"><a href="#工作区临时储存-恢复" class="headerlink" title="工作区临时储存/恢复"></a>工作区临时储存/恢复</h2><table><thead><tr><th>command</th><th>description</th></tr></thead><tbody><tr><td> $ git stash</td><td>储存当前工作区状态，并清空</td></tr><tr><td> $ git stash apply [stash@{n}]</td><td>恢复上一个被储存的工作区 [第n个储存的工作区]</td></tr><tr><td> $ git stash drop</td><td>删除stash list</td></tr><tr><td> $ git stash pop</td><td>恢复工作区，并删除stash list</td></tr></tbody></table><h2 id="标签创建-删除"><a href="#标签创建-删除" class="headerlink" title="标签创建/删除"></a>标签创建/删除</h2><table><thead><tr><th>command</th><th>description</th></tr></thead><tbody><tr><td> $ git tag v1.0 [commit Id]</td><td>为当前最新的提交创建名为v1.0的标签 [对给定提交id创建]</td></tr><tr><td> $ git tag -a v0.1 -m “some comments” commitId</td><td>-a指定名字，-m指定说明文字</td></tr><tr><td> $ git tag -d v0.1</td><td>删除名为v0.1的标签</td></tr><tr><td> $ git push origin <tagname></tagname></td><td>将tagName标签推送到远程</td></tr><tr><td> $ git push origin –tags</td><td>将所有未推送的标签推送到远程</td></tr><tr><td> $ git push origin :refs/tags/v0.9</td><td>删除远程名为v0.9的标签</td></tr></tbody></table><h2 id="git配置"><a href="#git配置" class="headerlink" title="git配置"></a>git配置</h2><table><thead><tr><th>command</th><th>description</th></tr></thead><tbody><tr><td> $ git config –global color.ui true</td><td>显示颜色</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;用作记录，方便查阅&lt;br&gt;
    
    </summary>
    
    
      <category term="git" scheme="tangenta.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>GDB常用命令汇总</title>
    <link href="tangenta.github.io/2017/09/27/GDB%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%B1%87%E6%80%BB/"/>
    <id>tangenta.github.io/2017/09/27/GDB常用命令汇总/</id>
    <published>2017-09-27T12:36:49.000Z</published>
    <updated>2017-10-26T10:07:41.305Z</updated>
    
    <content type="html"><![CDATA[<?xml version="1.0" encoding="utf-8"?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN""http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"><html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en"><head><title>GDB常用命令汇总</title><meta http-equiv="Content-Type" content="text/html;charset=utf-8"><meta name="generator" content="Org-mode"><style type="text/css"> <!--/*--><![CDATA[/*><!--*/  .title  { text-align: center; }  .todo   { font-family: monospace; color: red; }  .done   { color: green; }  .tag    { background-color: #eee; font-family: monospace;            padding: 2px; font-size: 80%; font-weight: normal; }  .timestamp { color: #bebebe; }  .timestamp-kwd { color: #5f9ea0; }  .right  { margin-left: auto; margin-right: 0px;  text-align: right; }  .left   { margin-left: 0px;  margin-right: auto; text-align: left; }  .center { margin-left: auto; margin-right: auto; text-align: center; }  .underline { text-decoration: underline; }  #postamble p, #preamble p { font-size: 90%; margin: .2em; }  p.verse { margin-left: 3%; }  pre {    border: 1px solid #ccc;    box-shadow: 3px 3px 3px #eee;    padding: 8pt;    font-family: monospace;    overflow: auto;    margin: 1.2em;  }  pre.src {    position: relative;    overflow: visible;    padding-top: 1.2em;  }  pre.src:before {    display: none;    position: absolute;    background-color: white;    top: -10px;    right: 10px;    padding: 3px;    border: 1px solid black;  }  pre.src:hover:before { display: inline;}  pre.src-sh:before    { content: 'sh'; }  pre.src-bash:before  { content: 'sh'; }  pre.src-emacs-lisp:before { content: 'Emacs Lisp'; }  pre.src-R:before     { content: 'R'; }  pre.src-perl:before  { content: 'Perl'; }  pre.src-java:before  { content: 'Java'; }  pre.src-sql:before   { content: 'SQL'; }  table { border-collapse:collapse; }  caption.t-above { caption-side: top; }  caption.t-bottom { caption-side: bottom; }  td, th { vertical-align:top;  }  th.right  { text-align: center;  }  th.left   { text-align: center;   }  th.center { text-align: center; }  td.right  { text-align: right;  }  td.left   { text-align: left;   }  td.center { text-align: center; }  dt { font-weight: bold; }  .footpara:nth-child(2) { display: inline; }  .footpara { display: block; }  .footdef  { margin-bottom: 1em; }  .figure { padding: 1em; }  .figure p { text-align: center; }  .inlinetask {    padding: 10px;    border: 2px solid gray;    margin: 10px;    background: #ffffcc;  }  #org-div-home-and-up   { text-align: right; font-size: 70%; white-space: nowrap; }  textarea { overflow-x: auto; }  .linenr { font-size: smaller }  .code-highlighted { background-color: #ffff00; }  .org-info-js_info-navigation { border-style: none; }  #org-info-js_console-label    { font-size: 10px; font-weight: bold; white-space: nowrap; }  .org-info-js_search-highlight    { background-color: #ffff00; color: #000000; font-weight: bold; }  /*]]>*/--></style><script type="text/javascript">/*@licstart  The following is the entire license notice for theJavaScript code in this tag.Copyright (C) 2012-2013 Free Software Foundation, Inc.The JavaScript code in this tag is free software: you canredistribute it and/or modify it under the terms of the GNUGeneral Public License (GNU GPL) as published by the Free SoftwareFoundation, either version 3 of the License, or (at your option)any later version.  The code is distributed WITHOUT ANY WARRANTY;without even the implied warranty of MERCHANTABILITY or FITNESSFOR A PARTICULAR PURPOSE.  See the GNU GPL for more details.As additional permission under GNU GPL version 3 section 7, youmay distribute non-source (e.g., minimized or compacted) forms ofthat code without the copy of the GNU GPL normally required bysection 4, provided you include this license notice and a URLthrough which recipients can access the Corresponding Source.@licend  The above is the entire license noticefor the JavaScript code in this tag.*/<!--/*--><![CDATA[/*><!--*/ function CodeHighlightOn(elem, id) {   var target = document.getElementById(id);   if(null != target) {     elem.cacheClassElem = elem.className;     elem.cacheClassTarget = target.className;     target.className = "code-highlighted";     elem.className   = "code-highlighted";   } } function CodeHighlightOff(elem, id) {   var target = document.getElementById(id);   if(elem.cacheClassElem)     elem.className = elem.cacheClassElem;   if(elem.cacheClassTarget)     target.className = elem.cacheClassTarget; }/*]]>*///--></script></head><body><p>用作记录，方便查阅</p><a id="more"></a><div id="content"><div id="table-of-contents"><h1>Table of Contents</h1><div id="text-table-of-contents"><ul><li><a href="#sec-1">1. Starting</a></li><li><a href="#sec-2">2. Running and stopping</a></li><li><a href="#sec-3">3. Breakpoints</a></li><li><a href="#sec-4">4. Execution</a></li><li><a href="#sec-5">5. Examining code</a></li><li><a href="#sec-6">6. Examining data</a></li><li><a href="#sec-7">7. Useful information</a></li></ul></div></div><table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"><colgroup><col class="left"><col class="left"></colgroup><tbody><tr><td class="left">Command</td><td class="left">Effect</td></tr></tbody></table><div id="outline-container-sec-1" class="outline-1"><h1 id="sec-1"><span class="section-number-1">1</span> Starting</h1><div class="outline-text-1" id="text-1"><table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"><colgroup><col class="left"><col class="left"></colgroup><tbody><tr><td class="left">gdb</td><td class="left">&#xa0;</td></tr><tr><td class="left">gdb &lt;file&gt;</td><td class="left">&#xa0;</td></tr></tbody></table></div></div><div id="outline-container-sec-2" class="outline-1"><h1 id="sec-2"><span class="section-number-1">2</span> Running and stopping</h1><div class="outline-text-1" id="text-2"><table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"><colgroup><col class="left"><col class="left"></colgroup><tbody><tr><td class="left">quit</td><td class="left">Exit gdb</td></tr><tr><td class="left">run</td><td class="left">Run program</td></tr><tr><td class="left">run 1 2 3</td><td class="left">Run program with command-line arguments 1 2 3</td></tr><tr><td class="left">kill</td><td class="left">Stop the program</td></tr><tr><td class="left">quit</td><td class="left">Exit gdb</td></tr><tr><td class="left">Ctrl-d</td><td class="left">Exit gdb</td></tr></tbody></table><p>Note: Ctrl-C does not exit from gdb, but halts the currentgdb command</p></div></div><div id="outline-container-sec-3" class="outline-1"><h1 id="sec-3"><span class="section-number-1">3</span> Breakpoints</h1><div class="outline-text-1" id="text-3"><table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"><colgroup><col class="left"><col class="left"></colgroup><tbody><tr><td class="left">break sum</td><td class="left">Set breakpoint at the entry to function sum</td></tr><tr><td class="left">break *0x80483c3</td><td class="left">Set breakpoint at address 0x80483c3</td></tr><tr><td class="left">delete 1</td><td class="left">Delete breakpoint 1</td></tr><tr><td class="left">disable 1</td><td class="left">Delete breakpoint 1</td></tr><tr><td class="left">enable 1</td><td class="left">Enable breakpoint 1</td></tr><tr><td class="left">delete</td><td class="left">Delete all breakpoints</td></tr><tr><td class="left">clear sum</td><td class="left">clear sum</td></tr></tbody></table></div></div><div id="outline-container-sec-4" class="outline-1"><h1 id="sec-4"><span class="section-number-1">4</span> Execution</h1><div class="outline-text-1" id="text-4"><table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"><colgroup><col class="left"><col class="left"></colgroup><tbody><tr><td class="left">stepi</td><td class="left">Execute one instruction</td></tr><tr><td class="left">stepi 4</td><td class="left">Execute four instructions</td></tr><tr><td class="left">nexti</td><td class="left">Like stepi, but proceed through function calls without stopping</td></tr><tr><td class="left">step</td><td class="left">Execute one C statement</td></tr><tr><td class="left">continue</td><td class="left">Resume execution until the next breakpoint</td></tr><tr><td class="left">until 3</td><td class="left">Continue executing until program hits breakpoint 3</td></tr><tr><td class="left">finish</td><td class="left">Resume execution until current function returns</td></tr><tr><td class="left">call sum(1,2)</td><td class="left">Call sum(1,2) and print return value</td></tr></tbody></table></div></div><div id="outline-container-sec-5" class="outline-1"><h1 id="sec-5"><span class="section-number-1">5</span> Examining code</h1><div class="outline-text-1" id="text-5"><table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"><colgroup><col class="left"><col class="left"></colgroup><tbody><tr><td class="left">disas</td><td class="left">Disassemble current function</td></tr><tr><td class="left">disas sum</td><td class="left">Disassemble function sum</td></tr><tr><td class="left">disas 0x80483b7</td><td class="left">Disassemble function around 0x80483b7</td></tr><tr><td class="left">disas 0x80483b7 0x80483c7</td><td class="left">Disassemble code within specified address range</td></tr><tr><td class="left">print /x $rip</td><td class="left">Print program counter in hex</td></tr><tr><td class="left">print /d $rip</td><td class="left">Print program counter in decimal</td></tr><tr><td class="left">print /t $rip</td><td class="left">Print program counter in binary</td></tr></tbody></table></div></div><div id="outline-container-sec-6" class="outline-1"><h1 id="sec-6"><span class="section-number-1">6</span> Examining data</h1><div class="outline-text-1" id="text-6"><table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"><colgroup><col class="left"><col class="left"></colgroup><tbody><tr><td class="left">print /d $rax</td><td class="left">Print contents of %rax in decimal</td></tr><tr><td class="left">print /x $rax</td><td class="left">Print contents of %rax in hex</td></tr><tr><td class="left">print /t $rax</td><td class="left">Print contents of %rax in binary</td></tr><tr><td class="left">print /d (int)$rax</td><td class="left">Print contents of %rax in decimal after sign-extending lower 32-bits.</td></tr></tbody></table><p>You need this to print 32-bit, negative numbers stored in the lower 32 bits of %rax.For example, if the lower 32-bits of %rax store 0xffffffff, you will see: </p><pre class="example">(gdb) print $rax$1 = 4294967295(gdb) print (int)$rax$2 = -1</pre><table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"><colgroup><col class="left"><col class="left"></colgroup><tbody><tr><td class="left">print 0x100</td><td class="left">Print decimal representation of 0x100</td></tr><tr><td class="left">print /x 555</td><td class="left">Print hex representation of 555</td></tr><tr><td class="left">print /x ($rsp+8)</td><td class="left">Print (contents of %rsp) + 8 in hex</td></tr><tr><td class="left">print *(int *) 0xbffff890</td><td class="left">Print integer at address 0xbffff890</td></tr><tr><td class="left">print *(int *) ($rsp+8)</td><td class="left">Print integer at address %rsp + 8</td></tr><tr><td class="left">print (char *) 0xbfff890</td><td class="left">Examine a string stored at 0xbffff890</td></tr><tr><td class="left">x/w   0xbffff890</td><td class="left">Examine (4-byte) word starting at address 0xbffff890</td></tr><tr><td class="left">x/w   $rsp</td><td class="left">Examine (4-byte) word starting at address in $rsp</td></tr><tr><td class="left">x/wd  $rsp</td><td class="left">Examine (4-byte) word starting at address in $rsp. Print in decimal</td></tr><tr><td class="left">x/2w  $rsp</td><td class="left">Examine two (4-byte) words starting at address in $rsp</td></tr><tr><td class="left">x/2wd $rsp</td><td class="left">Examine two (4-byte) words starting at address in $rsp. Print in decimal</td></tr><tr><td class="left">x/g   $rsp</td><td class="left">Examine (8-byte) word starting at address in $rsp.</td></tr><tr><td class="left">x/gd  $rsp</td><td class="left">Examine (8-byte) word starting at address in $rsp. Print in decimal</td></tr><tr><td class="left">x/a   $rsp</td><td class="left">Examine address in $rsp. Print as offset from previous global symbol.</td></tr><tr><td class="left">x/s   0xbffff890</td><td class="left">Examine a string stored at 0xbffff890</td></tr><tr><td class="left">x/20b sum</td><td class="left">Examine first 20 opcode bytes of function sum</td></tr><tr><td class="left">x/10i sum</td><td class="left">Examine first 10 instructions of function sum</td></tr></tbody></table><p>(Note: the format string for the `x' command has the general form x/[NUM][SIZE][FORMAT] where</p><pre class="example">NUM  = number of objects to display.SIZE = size of each object (b=byte, h=half-word, w=word, g=giant (quad-word))FORMAT = how to display each object (d=decimal, x=hex, o=octal, etc.)</pre><p>  If you don't specify SIZE or FORMAT, either a default value, or the last  value you specified in a previous `print' or `x' command is used.)</p></div></div><div id="outline-container-sec-7" class="outline-1"><h1 id="sec-7"><span class="section-number-1">7</span> Useful information</h1><div class="outline-text-1" id="text-7"><table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"><colgroup><col class="left"><col class="left"></colgroup><tbody><tr><td class="left">backtrace</td><td class="left">Print the current address and stack backtrace</td></tr><tr><td class="left">where</td><td class="left">Print the current address and stack backtrace</td></tr><tr><td class="left">info program</td><td class="left">Print current status of the program)</td></tr><tr><td class="left">info functions</td><td class="left">Print functions in program</td></tr><tr><td class="left">info stack</td><td class="left">Print backtrace of the stack)</td></tr><tr><td class="left">info frame</td><td class="left">Print information about the current stack frame</td></tr><tr><td class="left">info registers</td><td class="left">Print registers and their contents</td></tr><tr><td class="left">info breakpoints</td><td class="left">Print status of user-settable breakpoints</td></tr><tr><td class="left">display /FMT EXPR</td><td class="left">Print expression EXPR using format FMT every time GDB stops</td></tr><tr><td class="left">undisplay</td><td class="left">Turn off display mode</td></tr><tr><td class="left">help</td><td class="left">Get information about gdb</td></tr></tbody></table></div></div></div><div id="postamble" class="status"><p class="creator"><a href="http://www.gnu.org/software/emacs/" target="_blank" rel="external">Emacs</a> 24.5.1 (<a href="http://orgmode.org" target="_blank" rel="external">Org</a> mode 8.2.10)</p><p class="validation"><a href="http://validator.w3.org/check?uri=referer" target="_blank" rel="external">Validate</a></p></div></body></html>]]></content>
    
    <summary type="html">
    
      &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Strict//EN&quot;
&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&quot;&gt;
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; lang=&quot;en&quot; xml:lang=&quot;en&quot;&gt;
&lt;head&gt;
&lt;title&gt;GDB常用命令汇总&lt;/title&gt;
&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html;charset=utf-8&quot;&gt;
&lt;meta name=&quot;generator&quot; content=&quot;Org-mode&quot;&gt;
&lt;style type=&quot;text/css&quot;&gt;
 &lt;!--/*--&gt;&lt;![CDATA[/*&gt;&lt;!--*/
  .title  { text-align: center; }
  .todo   { font-family: monospace; color: red; }
  .done   { color: green; }
  .tag    { background-color: #eee; font-family: monospace;
            padding: 2px; font-size: 80%; font-weight: normal; }
  .timestamp { color: #bebebe; }
  .timestamp-kwd { color: #5f9ea0; }
  .right  { margin-left: auto; margin-right: 0px;  text-align: right; }
  .left   { margin-left: 0px;  margin-right: auto; text-align: left; }
  .center { margin-left: auto; margin-right: auto; text-align: center; }
  .underline { text-decoration: underline; }
  #postamble p, #preamble p { font-size: 90%; margin: .2em; }
  p.verse { margin-left: 3%; }
  pre {
    border: 1px solid #ccc;
    box-shadow: 3px 3px 3px #eee;
    padding: 8pt;
    font-family: monospace;
    overflow: auto;
    margin: 1.2em;
  }
  pre.src {
    position: relative;
    overflow: visible;
    padding-top: 1.2em;
  }
  pre.src:before {
    display: none;
    position: absolute;
    background-color: white;
    top: -10px;
    right: 10px;
    padding: 3px;
    border: 1px solid black;
  }
  pre.src:hover:before { display: inline;}
  pre.src-sh:before    { content: &#39;sh&#39;; }
  pre.src-bash:before  { content: &#39;sh&#39;; }
  pre.src-emacs-lisp:before { content: &#39;Emacs Lisp&#39;; }
  pre.src-R:before     { content: &#39;R&#39;; }
  pre.src-perl:before  { content: &#39;Perl&#39;; }
  pre.src-java:before  { content: &#39;Java&#39;; }
  pre.src-sql:before   { content: &#39;SQL&#39;; }

  table { border-collapse:collapse; }
  caption.t-above { caption-side: top; }
  caption.t-bottom { caption-side: bottom; }
  td, th { vertical-align:top;  }
  th.right  { text-align: center;  }
  th.left   { text-align: center;   }
  th.center { text-align: center; }
  td.right  { text-align: right;  }
  td.left   { text-align: left;   }
  td.center { text-align: center; }
  dt { font-weight: bold; }
  .footpara:nth-child(2) { display: inline; }
  .footpara { display: block; }
  .footdef  { margin-bottom: 1em; }
  .figure { padding: 1em; }
  .figure p { text-align: center; }
  .inlinetask {
    padding: 10px;
    border: 2px solid gray;
    margin: 10px;
    background: #ffffcc;
  }
  #org-div-home-and-up
   { text-align: right; font-size: 70%; white-space: nowrap; }
  textarea { overflow-x: auto; }
  .linenr { font-size: smaller }
  .code-highlighted { background-color: #ffff00; }
  .org-info-js_info-navigation { border-style: none; }
  #org-info-js_console-label
    { font-size: 10px; font-weight: bold; white-space: nowrap; }
  .org-info-js_search-highlight
    { background-color: #ffff00; color: #000000; font-weight: bold; }
  /*]]&gt;*/--&gt;
&lt;/style&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
/*
@licstart  The following is the entire license notice for the
JavaScript code in this tag.

Copyright (C) 2012-2013 Free Software Foundation, Inc.

The JavaScript code in this tag is free software: you can
redistribute it and/or modify it under the terms of the GNU
General Public License (GNU GPL) as published by the Free Software
Foundation, either version 3 of the License, or (at your option)
any later version.  The code is distributed WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE.  See the GNU GPL for more details.

As additional permission under GNU GPL version 3 section 7, you
may distribute non-source (e.g., minimized or compacted) forms of
that code without the copy of the GNU GPL normally required by
section 4, provided you include this license notice and a URL
through which recipients can access the Corresponding Source.


@licend  The above is the entire license notice
for the JavaScript code in this tag.
*/
&lt;!--/*--&gt;&lt;![CDATA[/*&gt;&lt;!--*/
 function CodeHighlightOn(elem, id)
 {
   var target = document.getElementById(id);
   if(null != target) {
     elem.cacheClassElem = elem.className;
     elem.cacheClassTarget = target.className;
     target.className = &quot;code-highlighted&quot;;
     elem.className   = &quot;code-highlighted&quot;;
   }
 }
 function CodeHighlightOff(elem, id)
 {
   var target = document.getElementById(id);
   if(elem.cacheClassElem)
     elem.className = elem.cacheClassElem;
   if(elem.cacheClassTarget)
     target.className = elem.cacheClassTarget;
 }
/*]]&gt;*///--&gt;
&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;p&gt;用作记录，方便查阅&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Linux命令实例 (长期更新)</title>
    <link href="tangenta.github.io/2017/09/24/Linux%E5%91%BD%E4%BB%A4%E5%AE%9E%E4%BE%8B%EF%BC%88%E9%95%BF%E6%9C%9F%E6%9B%B4%E6%96%B0%EF%BC%89/"/>
    <id>tangenta.github.io/2017/09/24/Linux命令实例（长期更新）/</id>
    <published>2017-09-24T13:10:56.000Z</published>
    <updated>2017-10-26T10:09:11.483Z</updated>
    
    <content type="html"><![CDATA[<p>记录常用linux命令<br><a id="more"></a></p><h2 id="文本文件在windows和linux之间的相互转换"><a href="#文本文件在windows和linux之间的相互转换" class="headerlink" title="文本文件在windows和linux之间的相互转换"></a>文本文件在windows和linux之间的相互转换</h2><p>差异：windows下的文本文件的编码方式默认采用的是GBK，而linux默认采用utf-8，因此同一文件在两种操作系统下可能会出现中文乱码的现象。另外，windows文件的换行符为’/r/n’，而linux文件则为’/n’，也会导致一系列奇怪问题的产生。</p><p>windows -&gt; linux: 多出来的 <strong>/r</strong> 文件换行符在vi下以 <strong>^M</strong> 的形式呈现。</p><ul><li><p>移除 <strong>^M</strong>: <code>sed -i &#39;s/^M//g&#39; fileName</code></p><blockquote><p><strong>-i</strong>  : 直接修改文件内容，不输出<br><strong>s</strong>  : 取代<br><strong>^M</strong> : 通过ctrl+v ctrl+m 输入<br><strong>g</strong>  : 应用于全局<br>‘s/匹配文本/替换文本/g’</p></blockquote></li><li><p>添加<strong>^M</strong>: <code>sed -i &#39;s/$/^M/g&#39; fileName</code></p><blockquote><p><strong>$</strong>: 匹配行末</p></blockquote></li><li><p>转换编码方式: <code>iconv -f gbk -t utf8 fileName &gt; newFileName</code></p><blockquote><p><strong>-f</strong>: from<br> <strong>-t</strong>: to</p></blockquote></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录常用linux命令&lt;br&gt;
    
    </summary>
    
    
      <category term="linux" scheme="tangenta.github.io/tags/linux/"/>
    
  </entry>
  
</feed>
